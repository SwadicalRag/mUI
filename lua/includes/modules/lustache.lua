--[[
The MIT License

Copyright (c) 2012 Olivine Labs

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
]]
local a;do local b;do local c,d,e=string.find,string.match,string.sub;local scanner={}function scanner:eos()return self.tail==""end;function scanner:scan(f)local match=d(self.tail,f)if match and c(self.tail,f)==1 then self.tail=e(self.tail,#match+1)self.pos=self.pos+#match;return match end end;function scanner:scan_until(f)local match;local pos=c(self.tail,f)if pos==nil then match=self.tail;self.pos=self.pos+#self.tail;self.tail=""elseif pos==1 then match=nil else match=e(self.tail,1,pos-1)self.tail=e(self.tail,pos)self.pos=self.pos+#match end;return match end;function scanner:new(g)local h={str=g,tail=g,pos=1}return setmetatable(h,{__index=self})end;b=scanner end;local i;do local c,j,tostring,type=string.find,string.split,tostring,type;local context={}context.__index=context;function context:clear_cache()self.cache={}end;function context:push(view)return self:new(view,self)end;function context:lookup(name)local value=self.cache[name]if not value then if name=="."then value=self.view else local context=self;while context do if c(name,".")>0 then local k=j(name,".")local l=0;value=context.view;if type(value)=="number"then value=tostring(value)end;while value and l<#k do l=l+1;value=value[k[l]]end else value=context.view[name]end;if value then break end;context=context.parent end end;self.cache[name]=value end;return value end;function context:new(view,m)local h={view=view,parent=m,cache={}}return setmetatable(h,context)end;i=context end;local error,ipairs,loadstring,pairs,setmetatable,tostring,type=error,ipairs,loadstring,pairs,setmetatable,tostring,type;local n,o,c,p,j,e,q,r,s=math.floor,math.max,string.find,string.gsub,string.split,string.sub,table.concat,table.insert,table.remove;local t={white="%s*",space="%s+",nonSpace="%S",eq="%s*=",curly="%s*}",tag="[#\\^/>{&=!]"}local u={["&"]="&amp;",["<"]="&lt;",[">"]="&gt;",['"']="&quot;",["'"]="&#39;",["/"]="&#x2F;"}local function v(w)if type(w)~="table"then return false end;local max,x=0,0;for y,z in pairs(w)do if not(type(y)=="number"and y>0 and n(y)==y)then return false end;max=o(max,y)x=x+1 end;return x==max end;local function A(B,C)local D={}local function E(l,B)if not D[l]then local F=A(B,C)D[l]=function(G,H)return F(G,H)end end;return D[l]end;local function render(G,H)local I={}local J,K;for l,J in ipairs(B)do local L=J.type;I[#I+1]=L=="#"and H:_section(J,G,E(l,J.tokens),C)or L=="^"and H:_inverted(J.value,G,E(l,J.tokens))or L==">"and H:_partial(J.value,G,C)or(L=="{"or L=="&")and H:_name(J.value,G,false)or L=="name"and H:_name(J.value,G,true)or L=="text"and J.value or""end;return q(I)end;return render end;local function M(tags)return{p(tags[1],"%%","%%%%").."%s*","%s*"..p(tags[2],"%%","%%%%")}end;local function N(B)local O={}local P=O;local Q={}local J,K;for l,J in ipairs(B)do if J.type=="#"or J.type=="^"then J.tokens={}Q[#Q+1]=J;P[#P+1]=J;P=J.tokens elseif J.type=="/"then if#Q==0 then error("Unopened section: "..J.value)end;K=s(Q,#Q)if not K.value==J.value then error("Unclosed section: "..K.value)end;K.closingTagIndex=J.startIndex;if#Q>0 then P=Q[#Q].tokens else P=O end else P[#P+1]=J end end;K=s(Q,#Q)if K then error("Unclosed section: "..K.value)end;return O end;local function R(B)local h,S={},{}local T,U;for z,V in ipairs(B)do if V.type=="text"then if#S==0 then T=V.startIndex end;S[#S+1]=V.value;U=V.endIndex else if#S>0 then h[#h+1]={type="text",value=q(S),startIndex=T,endIndex=U}S={}end;h[#h+1]=V end end;if#S>0 then h[#h+1]={type="text",value=q(S),startIndex=T,endIndex=U}end;return h end;local function W(view)if not view then return view end;return getmetatable(view)==i and view or i:new(view)end;local renderer={}function renderer:clear_cache()self.cache={}self.partial_cache={}end;function renderer:compile(B,tags,C)tags=tags or self.tags;if type(B)=="string"then B=self:parse(B,tags)end;local F=A(B,C)return function(view)return F(W(view),self)end end;function renderer:render(X,view,partials)if type(self)=="string"then error("Call mustache:render, not mustache.render!")end;if partials then self.partials=partials end;if not X then return""end;local F=self.cache[X]if not F then F=self:compile(X,self.tags,X)self.cache[X]=F end;return F(view)end;function renderer:_section(J,context,Y,C)local value=context:lookup(J.value)if type(value)=="table"then if v(value)then local Z=""for l,V in ipairs(value)do Z=Z..Y(context:push(V),self)end;return Z end;return Y(context:push(value),self)elseif type(value)=="function"then local _=e(C,J.endIndex+1,J.closingTagIndex-1)local a0=function(X)return self:render(X,context)end;return value(_,a0)or""else if value then return Y(context,self)end end;return""end;function renderer:_inverted(name,context,Y)local value=context:lookup(name)if value==nil or value==false or type(value)=="table"and v(value)and#value==0 then return Y(context,self)end;return""end;function renderer:_partial(name,context,C)local F=self.partial_cache[name]if not F and self.partials then local a1=self.partials[name]if not a1 then return""end;F=self:compile(a1,nil,C)self.partial_cache[name]=F end;return F and F(context,self)or""end;function renderer:_name(name,context,a2)local value=context:lookup(name)if type(value)=="function"then value=value(context.view)end;local g=value==nil and""or value;g=tostring(g)if a2 then return p(g,'[&<>"\'/]',function(a3)return u[a3]end)end;return g end;function renderer:parse(X,tags)tags=tags or self.tags;local a4=M(tags)local scanner=b:new(X)local B={}local a5={}local a6=false;local a7=false;local function a8()if a6 and not a7 then while#a5>0 do s(B,s(a5))end else a5={}end;a6=false;a7=false end;local type,value,a9;while not scanner:eos()do local aa=scanner.pos;value=scanner:scan_until(a4[1])if value then for l=1,#value do a9=e(value,l,l)if c(a9,"%s+")then a5[#a5+1]=#B+1 else a7=true end;B[#B+1]={type="text",value=a9,startIndex=aa,endIndex=aa}aa=aa+1;if a9=="\n"then a8()end end end;if not scanner:scan(a4[1])then break end;a6=true;type=scanner:scan(t.tag)or"name"scanner:scan(t.white)if type=="="then value=scanner:scan_until(t.eq)scanner:scan(t.eq)scanner:scan_until(a4[2])elseif type=="{"then local ab="%s*}"..tags[2]value=scanner:scan_until(ab)scanner:scan(t.curly)scanner:scan_until(a4[2])else value=scanner:scan_until(a4[2])end;if not scanner:scan(a4[2])then error("Unclosed tag at "..scanner.pos)end;B[#B+1]={type=type,value=value,startIndex=aa,endIndex=scanner.pos-1}if type=="name"or type=="{"or type=="&"then a7=true end;if type=="="then tags=j(value,t.space)a4=M(tags)end end;return N(R(B))end;function renderer:new()local h={cache={},partial_cache={},tags={"{{","}}"}}return setmetatable(h,{__index=self})end;a=renderer end;local ac=string.gmatch;function string.split(g,ad)local h={}for ae in ac(g,"[^"..ad.."]+")do h[#h+1]=ae end;return h end;local lustache={name="lustache",version="1.3.1-0",renderer=a:new()}_G.lustache=setmetatable(lustache,{__index=function(self,af)if self.renderer[af]then return self.renderer[af]end end,__newindex=function(self,af,ag)if af=="partials"then self.renderer.partials=ag end;if af=="tags"then self.renderer.tags=ag end end})return lustache
